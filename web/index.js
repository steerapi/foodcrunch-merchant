// Generated by CoffeeScript 1.4.0
var ExpectedDemandMerchant, FoodCrunchMerchant, Graph, ManageAccounts, ManageDiscounts, ManagePayments, NearbyCustomers, app;

app = angular.module("app", []);

Kinvey.init({
  appKey: "kid_PVFkQeQG5M",
  masterSecret: "183b25b078a24074a8a8942174e45df7"
});

FoodCrunchMerchant = function($scope) {};

NearbyCustomers = function($scope) {};

ManageDiscounts = function($scope) {};

ExpectedDemandMerchant = function($scope) {};

ManageAccounts = function($scope) {};

ManagePayments = function($scope) {};

Graph = function($scope) {
  var atAtimeMove, atAtimeShow, dataHybrid, plot, plotGraph, processData, update, updateHor;
  dataHybrid = [
    {
      label: "10:00",
      p: 50
    }, {
      label: "10:15",
      p: 50
    }, {
      label: "10:30",
      p: 50
    }, {
      label: "10:45",
      p: 50
    }, {
      label: "11:00",
      p: 50
    }, {
      label: "11:15",
      p: 50
    }, {
      label: "11:30",
      p: 50
    }, {
      label: "11:45",
      p: 50
    }
  ];
  atAtimeShow = 6;
  atAtimeMove = 1;
  $scope.init = function() {
    var data;
    $scope.all = dataHybrid;
    $scope.current = 0;
    data = $scope.all.slice($scope.current, $scope.current + atAtimeShow);
    return plot(data);
  };
  processData = function(data) {
    var discount, discounts, i, label, labels, ticks, _i, _j, _len, _len1;
    labels = _.pluck(data, "label");
    discounts = _.pluck(data, "p");
    ticks = [];
    for (i = _i = 0, _len = labels.length; _i < _len; i = ++_i) {
      label = labels[i];
      ticks.push([i, label]);
    }
    data = [];
    for (i = _j = 0, _len1 = discounts.length; _j < _len1; i = ++_j) {
      discount = discounts[i];
      data.push([i, discount]);
    }
    return [data, ticks];
  };
  plotGraph = null;
  plot = function(data) {
    var css_id, options, ticks, _ref;
    _ref = processData(data), data = _ref[0], ticks = _ref[1];
    console.log(data);
    console.log(ticks);
    css_id = "#placeholder";
    data = [
      {
        data: data
      }
    ];
    options = {
      grid: {
        show: true,
        clickable: true
      },
      series: {
        stack: 0,
        bars: {
          show: true,
          barWidth: 1.0,
          align: "center"
        }
      },
      xaxis: {
        ticks: ticks
      }
    };
    plotGraph = $.plot($(css_id), data, options);
    $(css_id).unbind();
    return $(css_id).bind("plotclick", function(event, pos, item) {
      if (item) {
        console.log("item");
        return $scope.selectedData = dataHybrid[$scope.current + item.dataIndex];
      }
    });
  };
  $scope.init();
  update = function(newV) {
    var data;
    data = $scope.all.slice($scope.current, $scope.current + atAtimeShow);
    $("#placehoder").empty();
    return plot(data);
  };
  updateHor = function(newV) {
    var data, ids;
    $scope.current = newV;
    data = $scope.all.slice($scope.current, $scope.current + atAtimeShow);
    $("#placehoder").empty();
    plot(data);
    ids = ["50a8b55807e58a812800331f", "50a90568f5aee49f75000e38", "1", "2", "3"];
    return ids.forEach(function(id) {
      var entity;
      entity = new Kinvey.Entity({}, "Schedule");
      console.log(entity);
      return entity.load(id, {
        success: function() {
          entity.set("p", p);
          return entity.save();
        },
        error: function() {}
      });
    });
  };
  $scope.dow = "Monday";
  $scope.increase = function() {
    $scope.selectedData.p += 2;
    return update($scope.selectedData.p);
  };
  $scope.decrease = function() {
    $scope.selectedData.p -= 2;
    return update($scope.selectedData.p);
  };
  $scope.prev = function() {
    var newV;
    newV = $scope.current - atAtimeMove;
    if (newV < 0) {
      return;
    }
    return updateHor(newV);
  };
  return $scope.next = function() {
    var newV;
    newV = $scope.current + atAtimeMove;
    if (newV + atAtimeShow > $scope.all.length) {
      return;
    }
    return updateHor(newV);
  };
};
